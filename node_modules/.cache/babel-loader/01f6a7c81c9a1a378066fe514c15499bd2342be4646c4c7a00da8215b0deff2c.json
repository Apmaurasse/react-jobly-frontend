{"ast":null,"code":"var _jsxFileName = \"/Users/adammaurasse/Springboard/React/React_Jobly/react-jobly/frontend/src/Templates/JobList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport useConfirmLoggedIn from \"../Helpers/useConfirmLoggedIn\";\nimport \"./JoblyAppStyles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JobList = ({\n  jobs\n}) => {\n  _s();\n  useConfirmLoggedIn();\n\n  // State to track whether each job has been applied to\n  const [appliedJobs, setAppliedJobs] = useState({});\n\n  // Function to handle applying to a job\n  const handleApply = jobId => {\n    setAppliedJobs(prevState => ({\n      ...prevState,\n      [jobId]: true\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"section-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title-container\",\n        children: \"Jobs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), jobs.map(job => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item-container\",\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: `/jobs/${job.id}`,\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: job.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: `/companies/${job.company_handle}`,\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Company Info\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }, this), appliedJobs[job.id] ? /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"dark-red-button\",\n          children: \"Applied\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"red-button\",\n          onClick: () => handleApply(job.id),\n          children: \"Apply\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 15\n        }, this)]\n      }, job.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(JobList, \"UCb0ulY28eCB9cvlStWZdaNv8xA=\", false, function () {\n  return [useConfirmLoggedIn];\n});\n_c = JobList;\nexport default JobList;\nvar _c;\n$RefreshReg$(_c, \"JobList\");","map":{"version":3,"names":["React","useState","Link","useConfirmLoggedIn","jsxDEV","_jsxDEV","JobList","jobs","_s","appliedJobs","setAppliedJobs","handleApply","jobId","prevState","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","job","to","id","title","company_handle","onClick","_c","$RefreshReg$"],"sources":["/Users/adammaurasse/Springboard/React/React_Jobly/react-jobly/frontend/src/Templates/JobList.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport useConfirmLoggedIn from \"../Helpers/useConfirmLoggedIn\";\nimport \"./JoblyAppStyles.css\";\n\nconst JobList = ({ jobs }) => {\n  useConfirmLoggedIn();\n\n  // State to track whether each job has been applied to\n  const [appliedJobs, setAppliedJobs] = useState({});\n\n  // Function to handle applying to a job\n  const handleApply = jobId => {\n    setAppliedJobs(prevState => ({\n      ...prevState,\n      [jobId]: true\n    }));\n  };\n\n  return (\n    <div>\n      <section className=\"section-container\">\n        <h1 className=\"title-container\">Jobs</h1>\n        {jobs.map(job => (\n          <div className=\"item-container\" key={job.id}>\n            <Link to={`/jobs/${job.id}`}>\n              <h2>{job.title}</h2>\n            </Link>\n            <Link to={`/companies/${job.company_handle}`}>\n              <h2>Company Info</h2>\n            </Link>\n            {/* Render Apply button if job has not been applied to, otherwise render Applied button */}\n            {appliedJobs[job.id] ? (\n              <button className=\"dark-red-button\">Applied</button>\n            ) : (\n              <button className=\"red-button\" onClick={() => handleApply(job.id)}>\n                Apply\n              </button>\n            )}\n          </div>\n        ))}\n      </section>\n    </div>\n  );\n};\n\nexport default JobList;\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,kBAAkB,MAAM,+BAA+B;AAC9D,OAAO,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,OAAO,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC5BL,kBAAkB,CAAC,CAAC;;EAEpB;EACA,MAAM,CAACM,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAElD;EACA,MAAMU,WAAW,GAAGC,KAAK,IAAI;IAC3BF,cAAc,CAACG,SAAS,KAAK;MAC3B,GAAGA,SAAS;MACZ,CAACD,KAAK,GAAG;IACX,CAAC,CAAC,CAAC;EACL,CAAC;EAED,oBACEP,OAAA;IAAAS,QAAA,eACET,OAAA;MAASU,SAAS,EAAC,mBAAmB;MAAAD,QAAA,gBACpCT,OAAA;QAAIU,SAAS,EAAC,iBAAiB;QAAAD,QAAA,EAAC;MAAI;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACxCZ,IAAI,CAACa,GAAG,CAACC,GAAG,iBACXhB,OAAA;QAAKU,SAAS,EAAC,gBAAgB;QAAAD,QAAA,gBAC7BT,OAAA,CAACH,IAAI;UAACoB,EAAE,EAAG,SAAQD,GAAG,CAACE,EAAG,EAAE;UAAAT,QAAA,eAC1BT,OAAA;YAAAS,QAAA,EAAKO,GAAG,CAACG;UAAK;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChB,CAAC,eACPd,OAAA,CAACH,IAAI;UAACoB,EAAE,EAAG,cAAaD,GAAG,CAACI,cAAe,EAAE;UAAAX,QAAA,eAC3CT,OAAA;YAAAS,QAAA,EAAI;UAAY;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjB,CAAC,EAENV,WAAW,CAACY,GAAG,CAACE,EAAE,CAAC,gBAClBlB,OAAA;UAAQU,SAAS,EAAC,iBAAiB;UAAAD,QAAA,EAAC;QAAO;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,gBAEpDd,OAAA;UAAQU,SAAS,EAAC,YAAY;UAACW,OAAO,EAAEA,CAAA,KAAMf,WAAW,CAACU,GAAG,CAACE,EAAE,CAAE;UAAAT,QAAA,EAAC;QAEnE;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CACT;MAAA,GAdkCE,GAAG,CAACE,EAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAetC,CACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACK;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEV,CAAC;AAACX,EAAA,CAvCIF,OAAO;EAAA,QACXH,kBAAkB;AAAA;AAAAwB,EAAA,GADdrB,OAAO;AAyCb,eAAeA,OAAO;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}