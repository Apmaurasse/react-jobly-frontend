{"ast":null,"code":"var _jsxFileName = \"/Users/adammaurasse/Springboard/React/React_Jobly/react-jobly/frontend/src/JoblyFrontendApp.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport JoblyRoutes from \"./JoblyRoutes\";\nimport JoblyApi from \"./Api\";\nimport { JoblyProvider } from \"./JoblyContext\";\nimport { v4 as uuidv4 } from 'uuid'; // Import uuidv4 function from uuid package\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JoblyFrontendApp = () => {\n  _s();\n  const [isLoading, setIsLoading] = useState(true);\n  const [companies, setCompanies] = useState([]);\n  const [jobs, setJobs] = useState([]);\n  const [firstName, setFirstName] = useState();\n  const [lastName, setLastName] = useState(\"\");\n  useEffect(() => {\n    // Retrieve user data from localStorage\n    const currentUserJSON = localStorage.getItem('currentUser');\n    if (currentUserJSON) {\n      const currentUser = JSON.parse(currentUserJSON);\n      // Extract first_name from user data\n      setFirstName(currentUser.first_name);\n      setLastName(currentUser.last_name);\n    }\n  }, []);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const companiesData = await JoblyApi.getCompanies();\n        const jobsData = await JoblyApi.getJobs();\n        // Generate unique IDs for each job\n        const jobsWithIds = jobsData.map(job => ({\n          ...job,\n          id: uuidv4()\n        }));\n        setCompanies(companiesData);\n        setJobs(jobsWithIds);\n        setIsLoading(false);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n        setIsLoading(false);\n      }\n    }\n    fetchData();\n  }, []);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading \\u2026\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(JoblyProvider, {\n    children: /*#__PURE__*/_jsxDEV(JoblyRoutes, {\n      companies: companies,\n      jobs: jobs,\n      firstName: firstName,\n      lastName: lastName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n_s(JoblyFrontendApp, \"n7L/vOS+UL5j4ARHn+1YzR5d2rs=\");\n_c = JoblyFrontendApp;\nexport default JoblyFrontendApp;\nvar _c;\n$RefreshReg$(_c, \"JoblyFrontendApp\");","map":{"version":3,"names":["React","useState","useEffect","JoblyRoutes","JoblyApi","JoblyProvider","v4","uuidv4","jsxDEV","_jsxDEV","JoblyFrontendApp","_s","isLoading","setIsLoading","companies","setCompanies","jobs","setJobs","firstName","setFirstName","lastName","setLastName","currentUserJSON","localStorage","getItem","currentUser","JSON","parse","first_name","last_name","fetchData","companiesData","getCompanies","jobsData","getJobs","jobsWithIds","map","job","id","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/adammaurasse/Springboard/React/React_Jobly/react-jobly/frontend/src/JoblyFrontendApp.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport JoblyRoutes from \"./JoblyRoutes\";\nimport JoblyApi from \"./Api\";\nimport { JoblyProvider } from \"./JoblyContext\";\nimport { v4 as uuidv4 } from 'uuid'; // Import uuidv4 function from uuid package\n\nconst JoblyFrontendApp = () => {\n    const [isLoading, setIsLoading] = useState(true);\n    const [companies, setCompanies] = useState([]);\n    const [jobs, setJobs] = useState([]);\n    const [firstName, setFirstName] = useState();\n    const [lastName, setLastName] = useState(\"\");\n\n      useEffect(() => {\n      // Retrieve user data from localStorage\n      const currentUserJSON = localStorage.getItem('currentUser');\n      if (currentUserJSON) {\n          const currentUser = JSON.parse(currentUserJSON);\n          // Extract first_name from user data\n          setFirstName(currentUser.first_name);\n          setLastName(currentUser.last_name);\n      }\n  }, []);\n\n    useEffect(() => {\n        async function fetchData() {\n            try {\n                const companiesData = await JoblyApi.getCompanies();\n                const jobsData = await JoblyApi.getJobs();\n                // Generate unique IDs for each job\n                const jobsWithIds = jobsData.map(job => ({ ...job, id: uuidv4() }));\n                setCompanies(companiesData);\n                setJobs(jobsWithIds);\n                setIsLoading(false);\n            } catch (error) {\n                console.error(\"Error fetching data:\", error);\n                setIsLoading(false); \n            }\n        }\n        fetchData();\n    }, []);\n\n    if (isLoading) {\n        return <p>Loading &hellip;</p>;\n    }\n\n    return (\n        <JoblyProvider>\n            <JoblyRoutes companies={companies} jobs={jobs} firstName={firstName} lastName={lastName} />\n        </JoblyProvider>\n    );\n}\n\nexport default JoblyFrontendApp;\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,QAAQ,MAAM,OAAO;AAC5B,SAASC,aAAa,QAAQ,gBAAgB;AAC9C,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErC,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACe,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,CAAC;EAC5C,MAAM,CAACmB,QAAQ,EAAEC,WAAW,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAE1CC,SAAS,CAAC,MAAM;IAChB;IACA,MAAMoB,eAAe,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IAC3D,IAAIF,eAAe,EAAE;MACjB,MAAMG,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACL,eAAe,CAAC;MAC/C;MACAH,YAAY,CAACM,WAAW,CAACG,UAAU,CAAC;MACpCP,WAAW,CAACI,WAAW,CAACI,SAAS,CAAC;IACtC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEJ3B,SAAS,CAAC,MAAM;IACZ,eAAe4B,SAASA,CAAA,EAAG;MACvB,IAAI;QACA,MAAMC,aAAa,GAAG,MAAM3B,QAAQ,CAAC4B,YAAY,CAAC,CAAC;QACnD,MAAMC,QAAQ,GAAG,MAAM7B,QAAQ,CAAC8B,OAAO,CAAC,CAAC;QACzC;QACA,MAAMC,WAAW,GAAGF,QAAQ,CAACG,GAAG,CAACC,GAAG,KAAK;UAAE,GAAGA,GAAG;UAAEC,EAAE,EAAE/B,MAAM,CAAC;QAAE,CAAC,CAAC,CAAC;QACnEQ,YAAY,CAACgB,aAAa,CAAC;QAC3Bd,OAAO,CAACkB,WAAW,CAAC;QACpBtB,YAAY,CAAC,KAAK,CAAC;MACvB,CAAC,CAAC,OAAO0B,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5C1B,YAAY,CAAC,KAAK,CAAC;MACvB;IACJ;IACAiB,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIlB,SAAS,EAAE;IACX,oBAAOH,OAAA;MAAAgC,QAAA,EAAG;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAClC;EAEA,oBACIpC,OAAA,CAACJ,aAAa;IAAAoC,QAAA,eACVhC,OAAA,CAACN,WAAW;MAACW,SAAS,EAAEA,SAAU;MAACE,IAAI,EAAEA,IAAK;MAACE,SAAS,EAAEA,SAAU;MAACE,QAAQ,EAAEA;IAAS;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChF,CAAC;AAExB,CAAC;AAAAlC,EAAA,CA7CKD,gBAAgB;AAAAoC,EAAA,GAAhBpC,gBAAgB;AA+CtB,eAAeA,gBAAgB;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}