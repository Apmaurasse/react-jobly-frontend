{"ast":null,"code":"import axios from \"axios\";\nconst BASE_API_URL = \"http://localhost:5000\";\nclass JoblyApi {\n  static async getCompanies({\n    minEmployees,\n    maxEmployees,\n    name\n  } = {}) {\n    let queryParams = \"\";\n    if (minEmployees !== undefined) {\n      queryParams += `&minEmployees=${minEmployees}`;\n    }\n    if (maxEmployees !== undefined) {\n      queryParams += `&maxEmployees=${maxEmployees}`;\n    }\n    if (name !== undefined) {\n      queryParams += `&name=${name}`;\n    }\n    const result = await axios.get(`${BASE_API_URL}/companies?${queryParams}`);\n    return result.data;\n  }\n  static async getJobs() {\n    const result = await axios.get(`${BASE_API_URL}/jobs`);\n    return result.data;\n  }\n  static async addUser(userData) {\n    try {\n      // Extract data from userData\n      const {\n        username,\n        first_name,\n        last_name,\n        email,\n        password,\n        isAdmin = false\n      } = userData;\n\n      // Construct user object\n      const newUser = {\n        username,\n        first_name,\n        last_name,\n        email,\n        password,\n        isAdmin\n      };\n\n      // Make a POST request to add the new user\n      const response = await axios.post(`${BASE_API_URL}/users`, newUser);\n      return response.data; // Return the newly added user\n    } catch (error) {\n      throw new Error(\"Error adding new user: \" + error.message);\n    }\n  }\n  static async findUser(loginData) {\n    try {\n      const {\n        username,\n        password\n      } = loginData;\n\n      // Make a GET request to your backend to check if the user exists\n      const response = await axios.get(`${BASE_API_URL}/users`, {\n        params: {\n          username,\n          password\n        }\n      });\n\n      // Assuming your backend returns a specific response indicating login success\n      if (response.data && response.data.length > 0) {\n        const user = response.data[0];\n        // Check if the password matches\n        if (user.password === password) {\n          // If the login was successful, store the user data in localStorage\n          localStorage.setItem('currentUser', JSON.stringify(user));\n          // Return the user data\n          return user;\n        } else {\n          // If the password doesn't match, throw an error\n          throw new Error(\"Invalid password\");\n        }\n      } else {\n        // If the user doesn't exist, throw an error\n        throw new Error(\"Invalid username/password\");\n      }\n    } catch (error) {\n      // If there's an error (e.g., network error), handle it\n      throw new Error(error.message);\n    }\n  }\n  static async logoutUser(logoutData) {\n    try {\n      const {\n        username\n      } = logoutData;\n      const response = await axios.get(`${BASE_API_URL}/users`, {\n        params: {\n          username\n        }\n      });\n      if (response.data && response.data.length > 0) {\n        const user = response.data[0];\n        if (user.username === username) {\n          localStorage.removeItem('currentUser');\n          return user;\n        } else {\n          throw new Error(\"No match\");\n        }\n      } else {\n        throw new Error(\"Incorrect user\");\n      }\n    } catch (error) {\n      // If there's an error (e.g., network error), handle it\n      throw new Error(error.message);\n    }\n  }\n  static async updateUser(userData) {\n    try {\n      // Extract data from userData\n      const {\n        id,\n        username,\n        first_name,\n        last_name,\n        email,\n        password,\n        isAdmin\n      } = userData;\n\n      // Construct user object with only the fields that are provided\n      const updatedUser = {};\n      if (id !== undefined) {\n        updatedUser.id = id;\n      }\n      if (first_name !== undefined) {\n        updatedUser.first_name = first_name;\n      }\n      if (last_name !== undefined) {\n        updatedUser.last_name = last_name;\n      }\n      if (email !== undefined) {\n        updatedUser.email = email;\n      }\n      if (password !== undefined) {\n        updatedUser.password = password;\n      }\n      if (isAdmin !== undefined) {\n        updatedUser.isAdmin = isAdmin;\n      }\n\n      // Make a PATCH request to update the user\n      const response = await axios.patch(`${BASE_API_URL}/users/${id}`, updatedUser);\n      return response.data; // Return the updated user\n    } catch (error) {\n      throw new Error(\"Error updating user: \" + error.message);\n    }\n  }\n}\nexport default JoblyApi;","map":{"version":3,"names":["axios","BASE_API_URL","JoblyApi","getCompanies","minEmployees","maxEmployees","name","queryParams","undefined","result","get","data","getJobs","addUser","userData","username","first_name","last_name","email","password","isAdmin","newUser","response","post","error","Error","message","findUser","loginData","params","length","user","localStorage","setItem","JSON","stringify","logoutUser","logoutData","removeItem","updateUser","id","updatedUser","patch"],"sources":["/Users/adammaurasse/Springboard/React/React_Jobly/react-jobly/frontend/src/Api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst BASE_API_URL = \"http://localhost:5000\";\n\nclass JoblyApi {\n\n    static async getCompanies({ minEmployees, maxEmployees, name } = {}) {\n        let queryParams = \"\";\n        if (minEmployees !== undefined) {\n            queryParams += `&minEmployees=${minEmployees}`;\n        }\n        if (maxEmployees !== undefined) {\n            queryParams += `&maxEmployees=${maxEmployees}`;\n        }\n        if (name !== undefined) {\n            queryParams += `&name=${name}`;\n        }\n        const result = await axios.get(`${BASE_API_URL}/companies?${queryParams}`);\n        return result.data;\n    };\n\n    static async getJobs() {\n        const result = await axios.get(`${BASE_API_URL}/jobs`);\n        return result.data;\n    };\n\n\n    static async addUser(userData) {\n        try {\n          // Extract data from userData\n          const { username, first_name, last_name, email, password, isAdmin=false } = userData;\n    \n          // Construct user object\n          const newUser = { username, first_name, last_name, email, password, isAdmin };\n    \n          // Make a POST request to add the new user\n          const response = await axios.post(`${BASE_API_URL}/users`, newUser);\n    \n          return response.data; // Return the newly added user\n        } catch (error) {\n          throw new Error(\"Error adding new user: \" + error.message);\n        }\n      };\n\n      static async findUser(loginData) {\n        try {\n            const { username, password } = loginData;\n    \n            // Make a GET request to your backend to check if the user exists\n            const response = await axios.get(`${BASE_API_URL}/users`, {\n                params: {\n                    username,\n                    password\n                }\n            });\n    \n            // Assuming your backend returns a specific response indicating login success\n            if (response.data && response.data.length > 0) {\n                const user = response.data[0];\n                // Check if the password matches\n                if (user.password === password) {\n                    // If the login was successful, store the user data in localStorage\n                    localStorage.setItem('currentUser', JSON.stringify(user));\n                    // Return the user data\n                    return user;\n                } else {\n                    // If the password doesn't match, throw an error\n                    throw new Error(\"Invalid password\");\n                }\n            } else {\n                // If the user doesn't exist, throw an error\n                throw new Error(\"Invalid username/password\");\n            }\n        } catch (error) {\n            // If there's an error (e.g., network error), handle it\n            throw new Error(error.message);\n        }\n    };\n\n    static async logoutUser(logoutData) {\n        try {\n            const { username } = logoutData;\n\n            const response = await axios.get(`${BASE_API_URL}/users`, {\n                params: {\n                    username\n                }\n            });\n            \n            if (response.data && response.data.length > 0) {\n                const user = response.data[0];\n                if (user.username === username) {\n                    localStorage.removeItem('currentUser');\n                    return user;\n                } else {\n                    throw new Error(\"No match\");\n                }\n            } else {\n                throw new Error(\"Incorrect user\");\n            }\n        } catch (error) {\n            // If there's an error (e.g., network error), handle it\n            throw new Error(error.message);\n        }\n    };\n    \n    static async updateUser(userData) {\n        try {\n            // Extract data from userData\n            const { id, username, first_name, last_name, email, password, isAdmin } = userData;\n    \n            // Construct user object with only the fields that are provided\n            const updatedUser = {};\n            if (id !== undefined) {\n                updatedUser.id = id;\n            }    \n            if (first_name !== undefined) {\n                updatedUser.first_name = first_name;\n            }\n            if (last_name !== undefined) {\n                updatedUser.last_name = last_name;\n            }\n            if (email !== undefined) {\n                updatedUser.email = email;\n            }\n            if (password !== undefined) {\n                updatedUser.password = password;\n            }\n            if (isAdmin !== undefined) {\n                updatedUser.isAdmin = isAdmin;\n            }\n    \n            // Make a PATCH request to update the user\n            const response = await axios.patch(`${BASE_API_URL}/users/${id}`, updatedUser);\n    \n            return response.data; // Return the updated user\n        } catch (error) {\n            throw new Error(\"Error updating user: \" + error.message);\n        }\n    };\n    \n    \n\n}\n\nexport default JoblyApi;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}