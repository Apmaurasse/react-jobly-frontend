{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import JoblyRoutes from\"./JoblyRoutes\";import JoblyApi from\"./Api\";import{JoblyProvider}from\"./JoblyContext\";import{v4 as uuidv4}from'uuid';// Import uuidv4 function from uuid package\nimport{jsx as _jsx}from\"react/jsx-runtime\";const JoblyFrontendApp=()=>{const[isLoading,setIsLoading]=useState(true);const[companies,setCompanies]=useState([]);const[jobs,setJobs]=useState([]);const[firstName,setFirstName]=useState(\"\");const[lastName,setLastName]=useState(\"\");const[key,setKey]=useState(0);// Key for forcing remount\nuseEffect(()=>{// Retrieve user data from localStorage\nconst currentUserJSON=localStorage.getItem('currentUser');if(currentUserJSON){const currentUser=JSON.parse(currentUserJSON);// Extract first_name from user data\nsetFirstName(currentUser.first_name);setLastName(currentUser.last_name);}else{// No user data found, reset first and last name\nsetFirstName(\"\");setLastName(\"\");}},[key,firstName,lastName]);// Use key as dependency\nuseEffect(()=>{async function fetchData(){try{const companiesData=await JoblyApi.getCompanies();const jobsData=await JoblyApi.getJobs();// Generate unique IDs for each job\nconst jobsWithIds=jobsData.map(job=>({...job,id:uuidv4()}));setCompanies(companiesData);setJobs(jobsWithIds);setIsLoading(false);}catch(error){console.error(\"Error fetching data:\",error);setIsLoading(false);}}fetchData();},[key,firstName,lastName]);// Use key as dependency\nconst loginKey=()=>{setKey(prevKey=>prevKey+1);};const logoutKey=()=>{setKey(prevKey=>prevKey-1);};const updateKey=()=>{setKey(prevKey=>prevKey+1);};if(isLoading){return/*#__PURE__*/_jsx(\"p\",{children:\"Loading \\u2026\"});}return/*#__PURE__*/_jsx(JoblyProvider,{children:/*#__PURE__*/_jsx(JoblyRoutes,{companies:companies,jobs:jobs,firstName:firstName,lastName:lastName,loginKey:loginKey,logoutKey:logoutKey,updateKey:updateKey},key)},key);};export default JoblyFrontendApp;","map":{"version":3,"names":["React","useState","useEffect","JoblyRoutes","JoblyApi","JoblyProvider","v4","uuidv4","jsx","_jsx","JoblyFrontendApp","isLoading","setIsLoading","companies","setCompanies","jobs","setJobs","firstName","setFirstName","lastName","setLastName","key","setKey","currentUserJSON","localStorage","getItem","currentUser","JSON","parse","first_name","last_name","fetchData","companiesData","getCompanies","jobsData","getJobs","jobsWithIds","map","job","id","error","console","loginKey","prevKey","logoutKey","updateKey","children"],"sources":["/Users/adammaurasse/Springboard/React/React_Jobly/react-jobly/frontend/src/JoblyFrontendApp.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport JoblyRoutes from \"./JoblyRoutes\";\nimport JoblyApi from \"./Api\";\nimport { JoblyProvider } from \"./JoblyContext\";\nimport { v4 as uuidv4 } from 'uuid'; // Import uuidv4 function from uuid package\n\nconst JoblyFrontendApp = () => {\n    const [isLoading, setIsLoading] = useState(true);\n    const [companies, setCompanies] = useState([]);\n    const [jobs, setJobs] = useState([]);\n    const [firstName, setFirstName] = useState(\"\");\n    const [lastName, setLastName] = useState(\"\");\n    const [key, setKey] = useState(0); // Key for forcing remount\n\n    useEffect(() => {\n        // Retrieve user data from localStorage\n        const currentUserJSON = localStorage.getItem('currentUser');\n        if (currentUserJSON) {\n            const currentUser = JSON.parse(currentUserJSON);\n            // Extract first_name from user data\n            setFirstName(currentUser.first_name);\n            setLastName(currentUser.last_name);\n        } else {\n            // No user data found, reset first and last name\n            setFirstName(\"\");\n            setLastName(\"\");\n        }\n    }, [key, firstName, lastName]); // Use key as dependency\n\n    useEffect(() => {\n        async function fetchData() {\n            try {\n                const companiesData = await JoblyApi.getCompanies();\n                const jobsData = await JoblyApi.getJobs();\n                // Generate unique IDs for each job\n                const jobsWithIds = jobsData.map(job => ({ ...job, id: uuidv4() }));\n                setCompanies(companiesData);\n                setJobs(jobsWithIds);\n                setIsLoading(false);\n            } catch (error) {\n                console.error(\"Error fetching data:\", error);\n                setIsLoading(false); \n            }\n        }\n        fetchData();\n    }, [key, firstName, lastName]); // Use key as dependency\n\n    const loginKey = () => {\n        setKey(prevKey => prevKey + 1);\n    };\n\n    const logoutKey = () => {\n        setKey(prevKey => prevKey - 1); \n    };\n\n    const updateKey = () => {\n        setKey(prevKey => prevKey + 1);\n    }\n\n    if (isLoading) {\n        return <p>Loading &hellip;</p>;\n    }\n\n    return (\n        <JoblyProvider key={key}>\n            <JoblyRoutes companies={companies} jobs={jobs} firstName={firstName} lastName={lastName} key={key} loginKey={loginKey} logoutKey={logoutKey} updateKey={updateKey}/>\n        </JoblyProvider>\n    );\n}\n\nexport default JoblyFrontendApp;\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}