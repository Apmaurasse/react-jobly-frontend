{"ast":null,"code":"import React,{useState,useContext}from\"react\";import{useNavigate}from\"react-router-dom\";import JoblyContext from\"../JoblyContext\";import useConfirmLoggedIn from\"../Helpers/useConfirmLoggedIn\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ProfileEditPage=_ref=>{let{updateKey}=_ref;useConfirmLoggedIn();const JoblyApi=useContext(JoblyContext);const navigate=useNavigate();// Retrieve user data from localStorage\nconst storedUserData=JSON.parse(localStorage.getItem(\"currentUser\"))||{};// Initialize state with user data fetched from localStorage\nconst[userData,setUserData]=useState({id:storedUserData.id,username:storedUserData.username||\"\",first_name:storedUserData.first_name||\"\",last_name:storedUserData.last_name||\"\",email:storedUserData.email||\"\",password:storedUserData.password||\"\",// Assuming you don't want to populate password field\nerror:\"\"});const handleChange=e=>{const{name,value}=e.target;setUserData(prevData=>({...prevData,[name]:value}));};const handleSubmit=async e=>{e.preventDefault();try{// Call the updateUser function with updated user data\nawait JoblyApi.updateUser(userData);// Redirect to profile page after successful update\nnavigate(\"/\");}catch(error){setUserData(prevData=>({...prevData,error:error.message}));}updateKey();};return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"section\",{className:\"section-container\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"title-container\",children:\"Profile Edit Page\"}),/*#__PURE__*/_jsxs(\"form\",{className:\"form-container\",onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-item\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"id\",children:\"User id\"}),/*#__PURE__*/_jsx(\"input\",{id:\"id\",type:\"text\",name:\"id\",value:userData.id,onChange:handleChange,readOnly:true})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-item\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"first_name\",children:\"First Name\"}),/*#__PURE__*/_jsx(\"input\",{id:\"first_name\",type:\"text\",name:\"first_name\",value:userData.first_name,onChange:handleChange})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-item\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"last_name\",children:\"Last Name\"}),/*#__PURE__*/_jsx(\"input\",{id:\"last_name\",type:\"text\",name:\"last_name\",value:userData.last_name,onChange:handleChange})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-item\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"email\",children:\"Email\"}),/*#__PURE__*/_jsx(\"input\",{id:\"email\",type:\"text\",name:\"email\",value:userData.email,onChange:handleChange})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-item\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"password\",children:\"Password\"}),/*#__PURE__*/_jsx(\"input\",{id:\"password\",type:\"password\",name:\"password\",value:userData.password,onChange:handleChange})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Update\"})]}),userData.error&&/*#__PURE__*/_jsx(\"p\",{children:userData.error})]})});};export default ProfileEditPage;","map":{"version":3,"names":["React","useState","useContext","useNavigate","JoblyContext","useConfirmLoggedIn","jsx","_jsx","jsxs","_jsxs","ProfileEditPage","_ref","updateKey","JoblyApi","navigate","storedUserData","JSON","parse","localStorage","getItem","userData","setUserData","id","username","first_name","last_name","email","password","error","handleChange","e","name","value","target","prevData","handleSubmit","preventDefault","updateUser","message","children","className","onSubmit","htmlFor","type","onChange","readOnly"],"sources":["/Users/adammaurasse/Springboard/React/React_Jobly/react-jobly/frontend/src/Templates/ProfileEditPage.jsx"],"sourcesContent":["import React, { useState, useContext } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport JoblyContext from \"../JoblyContext\";\nimport useConfirmLoggedIn from \"../Helpers/useConfirmLoggedIn\";\n\nconst ProfileEditPage = ({updateKey}) => {\n    useConfirmLoggedIn();\n\n    const JoblyApi = useContext(JoblyContext);\n    const navigate = useNavigate();\n\n    // Retrieve user data from localStorage\n    const storedUserData = JSON.parse(localStorage.getItem(\"currentUser\")) || {};\n\n    // Initialize state with user data fetched from localStorage\n    const [userData, setUserData] = useState({\n        id: storedUserData.id,\n        username: storedUserData.username || \"\", \n        first_name: storedUserData.first_name || \"\",\n        last_name: storedUserData.last_name || \"\",\n        email: storedUserData.email || \"\",\n        password: storedUserData.password || \"\", // Assuming you don't want to populate password field\n        error: \"\"\n    });\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        setUserData((prevData) => ({\n            ...prevData,\n            [name]: value\n        }));\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        try {\n            // Call the updateUser function with updated user data\n            await JoblyApi.updateUser(userData);\n            // Redirect to profile page after successful update\n            navigate(\"/\");\n        } catch (error) {\n            setUserData((prevData) => ({\n                ...prevData,\n                error: error.message\n            }));\n        }\n        updateKey();\n    };\n\n    return (\n        <div>\n\n            <section className=\"section-container\"> \n\n            <h1 className=\"title-container\">Profile Edit Page</h1> \n\n                <form className=\"form-container\" onSubmit={handleSubmit}>\n                <div className=\"form-item\">\n                        <label htmlFor=\"id\">User id</label> \n                        <input \n                            id=\"id\" \n                            type=\"text\" \n                            name=\"id\" \n                            value={userData.id} \n                            onChange={handleChange}\n                            readOnly />\n                    </div>\n                    <div className=\"form-item\">\n                        <label htmlFor=\"first_name\">First Name</label> \n                        <input \n                            id=\"first_name\" \n                            type=\"text\" \n                            name=\"first_name\" \n                            value={userData.first_name} \n                            onChange={handleChange} />\n                    </div>\n                    <div className=\"form-item\">\n                        <label htmlFor=\"last_name\">Last Name</label> \n                        <input \n                            id=\"last_name\" \n                            type=\"text\" \n                            name=\"last_name\" \n                            value={userData.last_name} \n                            onChange={handleChange} />\n                    </div>\n                    <div className=\"form-item\">\n                        <label htmlFor=\"email\">Email</label> \n                        <input \n                            id=\"email\" \n                            type=\"text\" \n                            name=\"email\" \n                            value={userData.email} \n                            onChange={handleChange} />\n                    </div>\n                    <div className=\"form-item\">\n                        <label htmlFor=\"password\">Password</label> \n                        <input \n                            id=\"password\" \n                            type=\"password\" \n                            name=\"password\" \n                            value={userData.password} \n                            onChange={handleChange} />\n                    </div>\n                    {/* Add other fields (firstName, lastName, email) similarly */}\n                    <button type=\"submit\">Update</button>\n                </form>\n                {userData.error && (\n                    <p>{userData.error}</p>\n                )}\n            </section>\n        </div>\n    );\n};\n\nexport default ProfileEditPage;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}