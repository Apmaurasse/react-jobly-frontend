{"ast":null,"code":"import axios from\"axios\";const BASE_API_URL=\"https://json-server-hzn5.onrender.com\";class JoblyApi{static async getCompanies(){let{minEmployees,maxEmployees,name}=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};let queryParams=\"\";if(minEmployees!==undefined){queryParams+=\"&minEmployees=\".concat(minEmployees);}if(maxEmployees!==undefined){queryParams+=\"&maxEmployees=\".concat(maxEmployees);}if(name!==undefined){queryParams+=\"&name=\".concat(name);}const result=await axios.get(\"\".concat(BASE_API_URL,\"/companies?\").concat(queryParams));return result.data;}static async getJobs(){const result=await axios.get(\"\".concat(BASE_API_URL,\"/jobs\"));return result.data;}static async addUser(userData){try{// Extract data from userData\nconst{username,first_name,last_name,email,password,isAdmin=false}=userData;// Construct user object\nconst newUser={username,first_name,last_name,email,password,isAdmin};// Make a POST request to add the new user\nconst response=await axios.post(\"\".concat(BASE_API_URL,\"/users\"),newUser);return response.data;// Return the newly added user\n}catch(error){throw new Error(\"Error adding new user: \"+error.message);}}static async findUser(loginData){try{const{username,password}=loginData;// Make a GET request to your backend to check if the user exists\nconst response=await axios.get(\"\".concat(BASE_API_URL,\"/users\"),{params:{username,password}});// Assuming your backend returns a specific response indicating login success\nif(response.data&&response.data.length>0){const user=response.data[0];// Check if the password matches\nif(user.password===password){// If the login was successful, store the user data in localStorage\nlocalStorage.setItem('currentUser',JSON.stringify(user));// Return the user data\nreturn user;}else{// If the password doesn't match, throw an error\nthrow new Error(\"Invalid password\");}}else{// If the user doesn't exist, throw an error\nthrow new Error(\"Invalid username/password\");}}catch(error){// If there's an error (e.g., network error), handle it\nthrow new Error(error.message);}}static async logoutUser(logoutData){try{const{username}=logoutData;const response=await axios.get(\"\".concat(BASE_API_URL,\"/users\"),{params:{username}});if(response.data&&response.data.length>0){const user=response.data[0];if(user.username===username){localStorage.removeItem('currentUser');return user;}else{throw new Error(\"No match\");}}else{throw new Error(\"Incorrect user\");}}catch(error){// If there's an error (e.g., network error), handle it\nthrow new Error(error.message);}}static async updateUser(userData){try{// Extract data from userData\nconst{id,username,first_name,last_name,email,password,isAdmin}=userData;// Construct user object with only the fields that are provided\nconst updatedUser={};if(id!==undefined){updatedUser.id=id;}if(username!==undefined){updatedUser.username=username;}if(first_name!==undefined){updatedUser.first_name=first_name;}if(last_name!==undefined){updatedUser.last_name=last_name;}if(email!==undefined){updatedUser.email=email;}if(password!==undefined){updatedUser.password=password;}if(isAdmin!==undefined){updatedUser.isAdmin=isAdmin;}// Remove current user from localStorage\nlocalStorage.removeItem('currentUser');// Make a PATCH request to update the user\nconst response=await axios.patch(\"\".concat(BASE_API_URL,\"/users/\").concat(id),updatedUser);// Add the updated user back to localStorage\nlocalStorage.setItem('currentUser',JSON.stringify(response.data));return response.data;// Return the updated user\n}catch(error){throw new Error(\"Error updating user: \"+error.message);}}}export default JoblyApi;","map":{"version":3,"names":["axios","BASE_API_URL","JoblyApi","getCompanies","minEmployees","maxEmployees","name","arguments","length","undefined","queryParams","concat","result","get","data","getJobs","addUser","userData","username","first_name","last_name","email","password","isAdmin","newUser","response","post","error","Error","message","findUser","loginData","params","user","localStorage","setItem","JSON","stringify","logoutUser","logoutData","removeItem","updateUser","id","updatedUser","patch"],"sources":["/Users/adammaurasse/Springboard/React/React_Jobly/react-jobly/frontend/src/Api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst BASE_API_URL = \"https://json-server-hzn5.onrender.com\";\n\nclass JoblyApi {\n\n    static async getCompanies({ minEmployees, maxEmployees, name } = {}) {\n        let queryParams = \"\";\n        if (minEmployees !== undefined) {\n            queryParams += `&minEmployees=${minEmployees}`;\n        }\n        if (maxEmployees !== undefined) {\n            queryParams += `&maxEmployees=${maxEmployees}`;\n        }\n        if (name !== undefined) {\n            queryParams += `&name=${name}`;\n        }\n        const result = await axios.get(`${BASE_API_URL}/companies?${queryParams}`);\n        return result.data;\n    };\n\n    static async getJobs() {\n        const result = await axios.get(`${BASE_API_URL}/jobs`);\n        return result.data;\n    };\n\n\n    static async addUser(userData) {\n        try {\n          // Extract data from userData\n          const { username, first_name, last_name, email, password, isAdmin=false } = userData;\n    \n          // Construct user object\n          const newUser = { username, first_name, last_name, email, password, isAdmin };\n    \n          // Make a POST request to add the new user\n          const response = await axios.post(`${BASE_API_URL}/users`, newUser);\n    \n          return response.data; // Return the newly added user\n        } catch (error) {\n          throw new Error(\"Error adding new user: \" + error.message);\n        }\n      };\n\n      static async findUser(loginData) {\n        try {\n            const { username, password } = loginData;\n    \n            // Make a GET request to your backend to check if the user exists\n            const response = await axios.get(`${BASE_API_URL}/users`, {\n                params: {\n                    username,\n                    password\n                }\n            });\n    \n            // Assuming your backend returns a specific response indicating login success\n            if (response.data && response.data.length > 0) {\n                const user = response.data[0];\n                // Check if the password matches\n                if (user.password === password) {\n                    // If the login was successful, store the user data in localStorage\n                    localStorage.setItem('currentUser', JSON.stringify(user));\n                    // Return the user data\n                    return user;\n                } else {\n                    // If the password doesn't match, throw an error\n                    throw new Error(\"Invalid password\");\n                }\n            } else {\n                // If the user doesn't exist, throw an error\n                throw new Error(\"Invalid username/password\");\n            }\n        } catch (error) {\n            // If there's an error (e.g., network error), handle it\n            throw new Error(error.message);\n        }\n    };\n\n    static async logoutUser(logoutData) {\n        try {\n            const { username } = logoutData;\n\n            const response = await axios.get(`${BASE_API_URL}/users`, {\n                params: {\n                    username\n                }\n            });\n            \n            if (response.data && response.data.length > 0) {\n                const user = response.data[0];\n                if (user.username === username) {\n                    localStorage.removeItem('currentUser');\n                    return user;\n                } else {\n                    throw new Error(\"No match\");\n                }\n            } else {\n                throw new Error(\"Incorrect user\");\n            }\n        } catch (error) {\n            // If there's an error (e.g., network error), handle it\n            throw new Error(error.message);\n        }\n    };\n    \n    static async updateUser(userData) {\n        try {\n            // Extract data from userData\n            const { id, username, first_name, last_name, email, password, isAdmin } = userData;\n    \n            // Construct user object with only the fields that are provided\n            const updatedUser = {};\n            if (id !== undefined) {\n                updatedUser.id = id;\n            }  \n            if (username !== undefined) {\n                updatedUser.username = username;\n            }  \n            if (first_name !== undefined) {\n                updatedUser.first_name = first_name;\n            }\n            if (last_name !== undefined) {\n                updatedUser.last_name = last_name;\n            }\n            if (email !== undefined) {\n                updatedUser.email = email;\n            }\n            if (password !== undefined) {\n                updatedUser.password = password;\n            }\n            if (isAdmin !== undefined) {\n                updatedUser.isAdmin = isAdmin;\n            }\n\n            // Remove current user from localStorage\n            localStorage.removeItem('currentUser');\n    \n            // Make a PATCH request to update the user\n            const response = await axios.patch(`${BASE_API_URL}/users/${id}`, updatedUser);\n\n            // Add the updated user back to localStorage\n            localStorage.setItem('currentUser', JSON.stringify(response.data));\n    \n            return response.data; // Return the updated user\n        } catch (error) {\n            throw new Error(\"Error updating user: \" + error.message);\n        }\n    };\n    \n    \n\n}\n\nexport default JoblyApi;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}