{"ast":null,"code":"import axios from \"axios\";\nconst BASE_API_URL = \"http://localhost:5000\";\nclass JoblyApi {\n  static async getCompanies({\n    minEmployees,\n    maxEmployees,\n    name\n  } = {}) {\n    let queryParams = \"\";\n    if (minEmployees !== undefined) {\n      queryParams += `&minEmployees=${minEmployees}`;\n    }\n    if (maxEmployees !== undefined) {\n      queryParams += `&maxEmployees=${maxEmployees}`;\n    }\n    if (name !== undefined) {\n      queryParams += `&name=${name}`;\n    }\n    const result = await axios.get(`${BASE_API_URL}/companies?${queryParams}`);\n    return result.data;\n  }\n  static async getJobs() {\n    const result = await axios.get(`${BASE_API_URL}/jobs`);\n    return result.data;\n  }\n  static async addUser(userData) {\n    try {\n      // Extract data from userData\n      const {\n        username,\n        first_name,\n        last_name,\n        email,\n        password,\n        isAdmin = false\n      } = userData;\n\n      // Construct user object\n      const newUser = {\n        username,\n        first_name,\n        last_name,\n        email,\n        password,\n        isAdmin\n      };\n\n      // Make a POST request to add the new user\n      const response = await axios.post(`${BASE_API_URL}/users`, newUser);\n      return response.data; // Return the newly added user\n    } catch (error) {\n      throw new Error(\"Error adding new user: \" + error.message);\n    }\n  }\n  static async findUser(loginData) {\n    console.log(\"Here's the login data submitted\", loginData);\n    try {\n      const {\n        username,\n        password\n      } = loginData;\n\n      // Make a GET request to your backend to check if the user exists\n      const response = await axios.get(`${BASE_API_URL}/users`, {\n        params: {\n          username,\n          password\n        }\n      });\n      console.log(\"Here was the response\", response);\n      // Assuming your backend returns a specific response indicating login success\n      if (response.data && response.data.success) {\n        // If the login was successful, return the user data\n        return response.data.user;\n      } else {\n        // If the login failed, throw an error\n        throw new Error(\"Invalid username or password\");\n      }\n    } catch (error) {\n      // If there's an error (e.g., network error), handle it\n      throw new Error(\"Error finding user: \" + error.message);\n    }\n  }\n}\nexport default JoblyApi;","map":{"version":3,"names":["axios","BASE_API_URL","JoblyApi","getCompanies","minEmployees","maxEmployees","name","queryParams","undefined","result","get","data","getJobs","addUser","userData","username","first_name","last_name","email","password","isAdmin","newUser","response","post","error","Error","message","findUser","loginData","console","log","params","success","user"],"sources":["/Users/adammaurasse/Springboard/React/React_Jobly/react-jobly/frontend/src/Api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst BASE_API_URL = \"http://localhost:5000\";\n\nclass JoblyApi {\n\n    static async getCompanies({ minEmployees, maxEmployees, name } = {}) {\n        let queryParams = \"\";\n        if (minEmployees !== undefined) {\n            queryParams += `&minEmployees=${minEmployees}`;\n        }\n        if (maxEmployees !== undefined) {\n            queryParams += `&maxEmployees=${maxEmployees}`;\n        }\n        if (name !== undefined) {\n            queryParams += `&name=${name}`;\n        }\n        const result = await axios.get(`${BASE_API_URL}/companies?${queryParams}`);\n        return result.data;\n    };\n\n    static async getJobs() {\n        const result = await axios.get(`${BASE_API_URL}/jobs`);\n        return result.data;\n    };\n\n\n    static async addUser(userData) {\n        try {\n          // Extract data from userData\n          const { username, first_name, last_name, email, password, isAdmin=false } = userData;\n    \n          // Construct user object\n          const newUser = { username, first_name, last_name, email, password, isAdmin };\n    \n          // Make a POST request to add the new user\n          const response = await axios.post(`${BASE_API_URL}/users`, newUser);\n    \n          return response.data; // Return the newly added user\n        } catch (error) {\n          throw new Error(\"Error adding new user: \" + error.message);\n        }\n      };\n\n      static async findUser(loginData) {\n        console.log(\"Here's the login data submitted\", loginData)\n        try {\n            const { username, password } = loginData;\n            \n            // Make a GET request to your backend to check if the user exists\n            const response = await axios.get(`${BASE_API_URL}/users`, {\n                params: {\n                    username,\n                    password\n                }\n            });\n            console.log(\"Here was the response\", response)\n            // Assuming your backend returns a specific response indicating login success\n            if (response.data && response.data.success) {\n                // If the login was successful, return the user data\n                return response.data.user;\n            } else {\n                // If the login failed, throw an error\n                throw new Error(\"Invalid username or password\");\n            }\n        } catch (error) {\n            // If there's an error (e.g., network error), handle it\n            throw new Error(\"Error finding user: \" + error.message);\n        }\n    }\n    \n\n}\n\nexport default JoblyApi;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,uBAAuB;AAE5C,MAAMC,QAAQ,CAAC;EAEX,aAAaC,YAAYA,CAAC;IAAEC,YAAY;IAAEC,YAAY;IAAEC;EAAK,CAAC,GAAG,CAAC,CAAC,EAAE;IACjE,IAAIC,WAAW,GAAG,EAAE;IACpB,IAAIH,YAAY,KAAKI,SAAS,EAAE;MAC5BD,WAAW,IAAK,iBAAgBH,YAAa,EAAC;IAClD;IACA,IAAIC,YAAY,KAAKG,SAAS,EAAE;MAC5BD,WAAW,IAAK,iBAAgBF,YAAa,EAAC;IAClD;IACA,IAAIC,IAAI,KAAKE,SAAS,EAAE;MACpBD,WAAW,IAAK,SAAQD,IAAK,EAAC;IAClC;IACA,MAAMG,MAAM,GAAG,MAAMT,KAAK,CAACU,GAAG,CAAE,GAAET,YAAa,cAAaM,WAAY,EAAC,CAAC;IAC1E,OAAOE,MAAM,CAACE,IAAI;EACtB;EAEA,aAAaC,OAAOA,CAAA,EAAG;IACnB,MAAMH,MAAM,GAAG,MAAMT,KAAK,CAACU,GAAG,CAAE,GAAET,YAAa,OAAM,CAAC;IACtD,OAAOQ,MAAM,CAACE,IAAI;EACtB;EAGA,aAAaE,OAAOA,CAACC,QAAQ,EAAE;IAC3B,IAAI;MACF;MACA,MAAM;QAAEC,QAAQ;QAAEC,UAAU;QAAEC,SAAS;QAAEC,KAAK;QAAEC,QAAQ;QAAEC,OAAO,GAAC;MAAM,CAAC,GAAGN,QAAQ;;MAEpF;MACA,MAAMO,OAAO,GAAG;QAAEN,QAAQ;QAAEC,UAAU;QAAEC,SAAS;QAAEC,KAAK;QAAEC,QAAQ;QAAEC;MAAQ,CAAC;;MAE7E;MACA,MAAME,QAAQ,GAAG,MAAMtB,KAAK,CAACuB,IAAI,CAAE,GAAEtB,YAAa,QAAO,EAAEoB,OAAO,CAAC;MAEnE,OAAOC,QAAQ,CAACX,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOa,KAAK,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,yBAAyB,GAAGD,KAAK,CAACE,OAAO,CAAC;IAC5D;EACF;EAEA,aAAaC,QAAQA,CAACC,SAAS,EAAE;IAC/BC,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEF,SAAS,CAAC;IACzD,IAAI;MACA,MAAM;QAAEb,QAAQ;QAAEI;MAAS,CAAC,GAAGS,SAAS;;MAExC;MACA,MAAMN,QAAQ,GAAG,MAAMtB,KAAK,CAACU,GAAG,CAAE,GAAET,YAAa,QAAO,EAAE;QACtD8B,MAAM,EAAE;UACJhB,QAAQ;UACRI;QACJ;MACJ,CAAC,CAAC;MACFU,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAER,QAAQ,CAAC;MAC9C;MACA,IAAIA,QAAQ,CAACX,IAAI,IAAIW,QAAQ,CAACX,IAAI,CAACqB,OAAO,EAAE;QACxC;QACA,OAAOV,QAAQ,CAACX,IAAI,CAACsB,IAAI;MAC7B,CAAC,MAAM;QACH;QACA,MAAM,IAAIR,KAAK,CAAC,8BAA8B,CAAC;MACnD;IACJ,CAAC,CAAC,OAAOD,KAAK,EAAE;MACZ;MACA,MAAM,IAAIC,KAAK,CAAC,sBAAsB,GAAGD,KAAK,CAACE,OAAO,CAAC;IAC3D;EACJ;AAGJ;AAEA,eAAexB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}